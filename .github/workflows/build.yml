# CI: buduje obraz multi-arch, skanuje CVE, a potem publikuje
# Autor: Nazar Malizderskyi

name: build-and-release

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  REG_IMAGE: ghcr.io/${{ github.repository_owner }}/weather-app
  DH_CACHE_REPO: godefrey/weather-app-buildcache

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # 1. kod
    - uses: actions/checkout@v4

    # 2. qemu + buildx
    - uses: docker/setup-qemu-action@v3
      with: { platforms: "linux/amd64,linux/arm64" }

    - id: bx
      uses: docker/setup-buildx-action@v3

    # 3. logowanie do rejestrów
    - name: Docker Hub login
      uses: docker/login-action@v2
      with:
        registry: docker.io
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: GHCR login
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # 4. buduje i tymczasowo pushuje tag
    - name: Build & push temp tag
      uses: docker/build-push-action@v4
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ env.REG_IMAGE }}:ci-${{ github.sha }}
        cache-from: type=registry,ref=${{ env.DH_CACHE_REPO }}:cache
        cache-to:   type=registry,ref=${{ env.DH_CACHE_REPO }}:cache,mode=max
        builder: ${{ steps.bx.outputs.name }}

    # 5. skan CVE – zatrzyma workflow jeżeli znajdzie CRITICAL/HIGH
    - name: Trivy scan
      uses: aquasecurity/trivy-action@0.22.0
      with:
        image-ref: ${{ env.REG_IMAGE }}:ci-${{ github.sha }}
        vuln-type: "os,library"
        severity: "CRITICAL,HIGH"
        ignore-unfixed: true

    # 6. jeżeli Trivy = OK -> finalne tagi
    - name: Push final tags
      if: success()
      uses: docker/build-push-action@v4
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.REG_IMAGE }}:latest
          ${{ env.REG_IMAGE }}:${{ github.sha }}
        cache-from: type=registry,ref=${{ env.DH_CACHE_REPO }}:cache
        cache-to:   type=registry,ref=${{ env.DH_CACHE_REPO }}:cache,mode=max
        builder: ${{ steps.bx.outputs.name }}
