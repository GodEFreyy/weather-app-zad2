# .github/workflows/build.yml
#
# CI – build, scan, cache and publish a multi-arch image (amd64 + arm64)
# Docker-Hub cache repo  :  godefrey/weather-app-buildcache
# GHCR target repo       :  ghcr.io/<owner>/weather-app-zad2
# Secrets required       :  DOCKERHUB_USERNAME = godefrey
#                          DOCKERHUB_PASSWORD = <Docker-Hub password / PAT>

name: CI – Build & Push Multi-arch Image

on:
  push:
    branches: [ main ]        # run on every push to main
  workflow_dispatch:          # …and when triggered manually

# ---------- global env ----------
env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/weather-app-zad2
  CACHE_IMAGE: godefrey/weather-app-buildcache

permissions:                  # allow the job to push to GHCR
  contents: read
  packages: write
  id-token: write

jobs:
  build-scan-push:
    runs-on: ubuntu-latest

    steps:
    # 1️⃣  check out sources
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive

    # 2️⃣  set up QEMU for cross-architecture builds
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: linux/amd64,linux/arm64

    # 3️⃣  set up a Buildx builder
    - name: Set up Buildx
      id: buildx
      uses: docker/setup-buildx-action@v3

    # 4️⃣  log in to Docker Hub  (for cache layers)
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        registry: docker.io
        username: ${{ secrets.DOCKERHUB_USERNAME }}   # = godefrey
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    # 5️⃣  log in to the GitHub Container Registry (target registry)
    - name: Log in to GHCR
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # 6️⃣  build & PUSH a “cibuild-<sha>” test image (needed so Trivy can pull it)
    - name: Build and push test image
      uses: docker/build-push-action@v4
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true                               # push to GHCR right away
        tags: ${{ env.IMAGE_NAME }}:cibuild-${{ github.sha }}
        cache-from: type=registry,ref=${{ env.CACHE_IMAGE }}:cache
        cache-to:   type=registry,ref=${{ env.CACHE_IMAGE }}:cache,mode=max

    # 7️⃣  CVE scan – fail the job if any HIGH/CRITICAL vuln is found
    - name: Scan image with Trivy
      uses: aquasecurity/trivy-action@0.22.0      # note: NO “v” in the tag
      with:
        image-ref: ${{ env.IMAGE_NAME }}:cibuild-${{ github.sha }}
        scan-type: image
        format: table
        vuln-type: os,library
        severity: CRITICAL,HIGH
        ignore-unfixed: true

    # 8️⃣  promote to :latest and :<sha> only if the scan step succeeded
    - name: Build & push release tags
      if: success()      # runs only when all previous steps (incl. scan) succeeded
      uses: docker/build-push-action@v4
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.IMAGE_NAME }}:latest
          ${{ env.IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=registry,ref=${{ env.CACHE_IMAGE }}:cache
        cache-to:   type=registry,ref=${{ env.CACHE_IMAGE }}:cache,mode=max
