# File: .github/workflows/build.yml
name: CI â€“ Build & Push Multi-arch Image

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/weather-app
  CACHE_IMAGE: yourdockerhubuser/weather-app-buildcache

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform: [ linux/amd64, linux/arm64 ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        id: buildx

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build (no push yet) for multi-arch
        id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: false
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: |
            type=registry,ref=${{ env.CACHE_IMAGE }}:cache
          cache-to: |
            type=registry,ref=${{ env.CACHE_IMAGE }}:cache,mode=max
          builder: ${{ steps.buildx.outputs.name }}

      - name: Load image for scanning
        run: |
          docker pull ${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Scan image for CVEs (Trivy)
        uses: aquasecurity/trivy-action@v0.9.2
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          scan-type: image
          format: 'table'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true

      - name: Push image to GHCR
        if: success()
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: |
            type=registry,ref=${{ env.CACHE_IMAGE }}:cache
          cache-to: |
            type=registry,ref=${{ env.CACHE_IMAGE }}:cache,mode=max
          builder: ${{ steps.buildx.outputs.name }}
